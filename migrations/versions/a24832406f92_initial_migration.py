"""Initial migration

Revision ID: a24832406f92
Revises: 
Create Date: 2025-08-25 23:57:44.339991

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import pgvector.sqlalchemy

# revision identifiers, used by Alembic.
revision = 'a24832406f92'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('age_verifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.String(length=255), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('age', sa.Integer(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('verification_method', sa.String(length=50), nullable=True),
    sa.Column('verified_at', sa.DateTime(), nullable=True),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('verification_token', sa.String(length=128), nullable=True),
    sa.Column('attempts', sa.Integer(), nullable=True),
    sa.Column('country_code', sa.String(length=2), nullable=True),
    sa.Column('region', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('session_id')
    )
    with op.batch_alter_table('age_verifications', schema=None) as batch_op:
        batch_op.create_index('idx_age_verification_ip', ['ip_address'], unique=False)
        batch_op.create_index('idx_age_verification_session', ['session_id'], unique=False)
        batch_op.create_index('idx_age_verification_verified_at', ['verified_at'], unique=False)

    op.create_table('indexed_sites',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('url', sa.String(length=500), nullable=False),
    sa.Column('domain', sa.String(length=255), nullable=False),
    sa.Column('title', sa.String(length=500), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('site_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('last_indexed', sa.DateTime(), nullable=True),
    sa.Column('index_frequency', sa.Integer(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('url')
    )
    op.create_table('movie_documents',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('source_type', sa.String(length=50), nullable=True),
    sa.Column('source_id', sa.String(length=500), nullable=True),
    sa.Column('title', sa.String(length=500), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('doc_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('embedding', pgvector.sqlalchemy.Vector(dim=1536), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('s3_knowledge_base',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('s3_key', sa.String(length=500), nullable=False),
    sa.Column('filename', sa.String(length=255), nullable=True),
    sa.Column('content_type', sa.String(length=100), nullable=True),
    sa.Column('size', sa.BigInteger(), nullable=True),
    sa.Column('indexed', sa.Boolean(), nullable=True),
    sa.Column('last_indexed', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('s3_key')
    )
    op.create_table('security_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('severity', sa.String(length=20), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=80), nullable=False),
    sa.Column('email', sa.String(length=120), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=True),
    sa.Column('is_admin', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=True),
    sa.Column('verification_token', sa.String(length=100), nullable=True),
    sa.Column('verification_token_expiry', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=True),
    sa.Column('account_locked_until', sa.DateTime(), nullable=True),
    sa.Column('reset_token', sa.String(length=100), nullable=True),
    sa.Column('reset_token_expiry', sa.DateTime(), nullable=True),
    sa.Column('two_factor_secret', sa.String(length=32), nullable=True),
    sa.Column('two_factor_enabled', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('reset_token'),
    sa.UniqueConstraint('username'),
    sa.UniqueConstraint('verification_token')
    )
    op.create_table('admin_audit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('action', sa.String(length=255), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('api_keys',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('service', sa.String(length=50), nullable=False),
    sa.Column('encrypted_key', sa.Text(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('content_filters',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('filter_type', sa.String(length=20), nullable=False),
    sa.Column('pattern', sa.Text(), nullable=True),
    sa.Column('model_name', sa.String(length=100), nullable=True),
    sa.Column('threshold', sa.Float(), nullable=True),
    sa.Column('action', sa.String(length=50), nullable=True),
    sa.Column('replacement_text', sa.String(length=200), nullable=True),
    sa.Column('warning_message', sa.String(length=500), nullable=True),
    sa.Column('severity', sa.String(length=20), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('version', sa.String(length=20), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('content_filters', schema=None) as batch_op:
        batch_op.create_index('idx_content_filter_category', ['category'], unique=False)
        batch_op.create_index('idx_content_filter_enabled', ['enabled'], unique=False)

    op.create_table('content_keywords',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.Column('keyword', sa.String(length=100), nullable=False),
    sa.Column('weight', sa.Float(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('content_routing_rules',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('rule_name', sa.String(length=100), nullable=False),
    sa.Column('condition_type', sa.String(length=50), nullable=True),
    sa.Column('condition_value', sa.Text(), nullable=True),
    sa.Column('target_llm', sa.String(length=50), nullable=True),
    sa.Column('priority', sa.Integer(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('custom_routes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=True),
    sa.Column('path', sa.String(length=255), nullable=True),
    sa.Column('method', sa.String(length=10), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('action_type', sa.String(length=50), nullable=True),
    sa.Column('configuration', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('requires_auth', sa.Boolean(), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name'),
    sa.UniqueConstraint('path')
    )
    op.create_table('parameter_usage',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('temperature', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('top_k', sa.Integer(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('presence_penalty', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('frequency_penalty', sa.Numeric(precision=3, scale=2), nullable=True),
    sa.Column('preset_used', sa.String(length=50), nullable=True),
    sa.Column('preset_version', sa.String(length=20), nullable=True),
    sa.Column('query_type', sa.String(length=50), nullable=True),
    sa.Column('message_count', sa.Integer(), nullable=True),
    sa.Column('conversation_length', sa.Integer(), nullable=True),
    sa.Column('response_time', sa.Integer(), nullable=True),
    sa.Column('token_count', sa.Integer(), nullable=True),
    sa.Column('cost', sa.Numeric(precision=10, scale=4), nullable=True),
    sa.Column('user_rating', sa.Integer(), nullable=True),
    sa.Column('user_feedback', sa.String(length=500), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('parameter_usage', schema=None) as batch_op:
        batch_op.create_index('idx_parameter_usage_preset', ['preset_used'], unique=False)
        batch_op.create_index('idx_parameter_usage_session', ['session_id'], unique=False)
        batch_op.create_index('idx_parameter_usage_timestamp', ['timestamp'], unique=False)
        batch_op.create_index('idx_parameter_usage_user', ['user_id'], unique=False)

    op.create_table('payment_methods',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('stripe_payment_method_id', sa.String(length=100), nullable=False),
    sa.Column('card_brand', sa.String(length=20), nullable=True),
    sa.Column('card_last4', sa.String(length=4), nullable=True),
    sa.Column('card_exp_month', sa.Integer(), nullable=True),
    sa.Column('card_exp_year', sa.Integer(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_payment_method_id')
    )
    with op.batch_alter_table('payment_methods', schema=None) as batch_op:
        batch_op.create_index('idx_payment_method_user_id', ['user_id'], unique=False)

    op.create_table('rate_limit_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('endpoint', sa.String(length=200), nullable=True),
    sa.Column('user_tier', sa.String(length=20), nullable=True),
    sa.Column('rate_limit', sa.Integer(), nullable=True),
    sa.Column('current_usage', sa.Integer(), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.Column('referer', sa.String(length=255), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('rate_limit_logs', schema=None) as batch_op:
        batch_op.create_index('idx_rate_limit_log_timestamp', ['timestamp'], unique=False)
        batch_op.create_index('idx_rate_limit_log_user_timestamp', ['user_id', 'timestamp'], unique=False)

    op.create_table('routing_configurations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('use_claude_threshold', sa.Float(), nullable=True),
    sa.Column('use_gemini_threshold', sa.Float(), nullable=True),
    sa.Column('content_length_threshold', sa.Integer(), nullable=True),
    sa.Column('enable_cross_validation', sa.Boolean(), nullable=True),
    sa.Column('cross_validation_keywords', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('safety_reports',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('report_type', sa.String(length=50), nullable=False),
    sa.Column('period_start', sa.DateTime(), nullable=False),
    sa.Column('period_end', sa.DateTime(), nullable=False),
    sa.Column('total_interactions', sa.Integer(), nullable=True),
    sa.Column('total_violations', sa.Integer(), nullable=True),
    sa.Column('blocked_content', sa.Integer(), nullable=True),
    sa.Column('warnings_issued', sa.Integer(), nullable=True),
    sa.Column('false_positives', sa.Integer(), nullable=True),
    sa.Column('violations_by_category', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('violations_by_severity', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('compliance_score', sa.Float(), nullable=True),
    sa.Column('regulatory_notes', sa.Text(), nullable=True),
    sa.Column('generated_at', sa.DateTime(), nullable=True),
    sa.Column('generated_by', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['generated_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('safety_reports', schema=None) as batch_op:
        batch_op.create_index('idx_safety_report_period', ['period_start', 'period_end'], unique=False)
        batch_op.create_index('idx_safety_report_type', ['report_type'], unique=False)

    op.create_table('safety_violations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('violation_type', sa.String(length=100), nullable=False),
    sa.Column('severity', sa.String(length=20), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.Column('content_sample', sa.Text(), nullable=True),
    sa.Column('content_hash', sa.String(length=64), nullable=True),
    sa.Column('input_type', sa.String(length=20), nullable=True),
    sa.Column('endpoint', sa.String(length=200), nullable=True),
    sa.Column('message_id', sa.String(length=100), nullable=True),
    sa.Column('conversation_id', sa.String(length=100), nullable=True),
    sa.Column('detection_method', sa.String(length=50), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('detector_version', sa.String(length=20), nullable=True),
    sa.Column('action_taken', sa.String(length=100), nullable=True),
    sa.Column('auto_resolved', sa.Boolean(), nullable=True),
    sa.Column('manual_review_required', sa.Boolean(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('resolved_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('safety_violations', schema=None) as batch_op:
        batch_op.create_index('idx_safety_violation_session', ['session_id'], unique=False)
        batch_op.create_index('idx_safety_violation_severity', ['severity'], unique=False)
        batch_op.create_index('idx_safety_violation_timestamp', ['timestamp'], unique=False)
        batch_op.create_index('idx_safety_violation_type', ['violation_type'], unique=False)
        batch_op.create_index('idx_safety_violation_unresolved', ['manual_review_required'], unique=False)
        batch_op.create_index('idx_safety_violation_user', ['user_id'], unique=False)

    op.create_table('sessions',
    sa.Column('id', sa.String(length=64), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('age_verified', sa.Boolean(), nullable=True),
    sa.Column('age_verified_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_activity', sa.DateTime(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('subscription_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('stripe_event_id', sa.String(length=100), nullable=False),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('event_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('processed', sa.Boolean(), nullable=True),
    sa.Column('processing_error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_event_id')
    )
    with op.batch_alter_table('subscription_events', schema=None) as batch_op:
        batch_op.create_index('idx_subscription_event_processed', ['processed'], unique=False)
        batch_op.create_index('idx_subscription_event_type', ['event_type'], unique=False)

    op.create_table('usage_tracking',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('query_date', sa.Date(), nullable=False),
    sa.Column('query_count', sa.Integer(), nullable=True),
    sa.Column('query_type', sa.String(length=50), nullable=True),
    sa.Column('agents_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('total_tokens', sa.Integer(), nullable=True),
    sa.Column('total_cost', sa.Numeric(precision=10, scale=4), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'query_date', name='unique_user_date')
    )
    with op.batch_alter_table('usage_tracking', schema=None) as batch_op:
        batch_op.create_index('idx_usage_tracking_date', ['query_date'], unique=False)
        batch_op.create_index('idx_usage_tracking_user_date', ['user_id', 'query_date'], unique=False)

    op.create_table('user_preferences',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('theme', sa.String(length=50), nullable=True),
    sa.Column('custom_theme', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('language', sa.String(length=10), nullable=True),
    sa.Column('notifications_enabled', sa.Boolean(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('user_subscriptions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('tier', sa.String(length=20), nullable=False),
    sa.Column('stripe_customer_id', sa.String(length=100), nullable=True),
    sa.Column('stripe_subscription_id', sa.String(length=100), nullable=True),
    sa.Column('stripe_price_id', sa.String(length=100), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=True),
    sa.Column('current_period_start', sa.DateTime(), nullable=True),
    sa.Column('current_period_end', sa.DateTime(), nullable=True),
    sa.Column('cancel_at_period_end', sa.Boolean(), nullable=True),
    sa.Column('cancelled_at', sa.DateTime(), nullable=True),
    sa.Column('trial_start', sa.DateTime(), nullable=True),
    sa.Column('trial_end', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stripe_customer_id'),
    sa.UniqueConstraint('stripe_subscription_id'),
    sa.UniqueConstraint('user_id')
    )
    with op.batch_alter_table('user_subscriptions', schema=None) as batch_op:
        batch_op.create_index('idx_user_subscription_status', ['status'], unique=False)
        batch_op.create_index('idx_user_subscription_stripe_customer', ['stripe_customer_id'], unique=False)
        batch_op.create_index('idx_user_subscription_user_id', ['user_id'], unique=False)

    op.create_table('chat_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.String(length=64), nullable=True),
    sa.Column('user_input', sa.Text(), nullable=True),
    sa.Column('bot_response', sa.Text(), nullable=True),
    sa.Column('llm_used', sa.String(length=50), nullable=True),
    sa.Column('content_rating', sa.String(length=20), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('safety_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('session_id', sa.String(length=64), nullable=True),
    sa.Column('input_hash', sa.String(length=64), nullable=True),
    sa.Column('safe', sa.Boolean(), nullable=True),
    sa.Column('reason', sa.String(length=255), nullable=True),
    sa.Column('severity', sa.String(length=20), nullable=True),
    sa.Column('action', sa.String(length=20), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('safety_logs')
    op.drop_table('chat_logs')
    with op.batch_alter_table('user_subscriptions', schema=None) as batch_op:
        batch_op.drop_index('idx_user_subscription_user_id')
        batch_op.drop_index('idx_user_subscription_stripe_customer')
        batch_op.drop_index('idx_user_subscription_status')

    op.drop_table('user_subscriptions')
    op.drop_table('user_preferences')
    with op.batch_alter_table('usage_tracking', schema=None) as batch_op:
        batch_op.drop_index('idx_usage_tracking_user_date')
        batch_op.drop_index('idx_usage_tracking_date')

    op.drop_table('usage_tracking')
    with op.batch_alter_table('subscription_events', schema=None) as batch_op:
        batch_op.drop_index('idx_subscription_event_type')
        batch_op.drop_index('idx_subscription_event_processed')

    op.drop_table('subscription_events')
    op.drop_table('sessions')
    with op.batch_alter_table('safety_violations', schema=None) as batch_op:
        batch_op.drop_index('idx_safety_violation_user')
        batch_op.drop_index('idx_safety_violation_unresolved')
        batch_op.drop_index('idx_safety_violation_type')
        batch_op.drop_index('idx_safety_violation_timestamp')
        batch_op.drop_index('idx_safety_violation_severity')
        batch_op.drop_index('idx_safety_violation_session')

    op.drop_table('safety_violations')
    with op.batch_alter_table('safety_reports', schema=None) as batch_op:
        batch_op.drop_index('idx_safety_report_type')
        batch_op.drop_index('idx_safety_report_period')

    op.drop_table('safety_reports')
    op.drop_table('routing_configurations')
    with op.batch_alter_table('rate_limit_logs', schema=None) as batch_op:
        batch_op.drop_index('idx_rate_limit_log_user_timestamp')
        batch_op.drop_index('idx_rate_limit_log_timestamp')

    op.drop_table('rate_limit_logs')
    with op.batch_alter_table('payment_methods', schema=None) as batch_op:
        batch_op.drop_index('idx_payment_method_user_id')

    op.drop_table('payment_methods')
    with op.batch_alter_table('parameter_usage', schema=None) as batch_op:
        batch_op.drop_index('idx_parameter_usage_user')
        batch_op.drop_index('idx_parameter_usage_timestamp')
        batch_op.drop_index('idx_parameter_usage_session')
        batch_op.drop_index('idx_parameter_usage_preset')

    op.drop_table('parameter_usage')
    op.drop_table('custom_routes')
    op.drop_table('content_routing_rules')
    op.drop_table('content_keywords')
    with op.batch_alter_table('content_filters', schema=None) as batch_op:
        batch_op.drop_index('idx_content_filter_enabled')
        batch_op.drop_index('idx_content_filter_category')

    op.drop_table('content_filters')
    op.drop_table('api_keys')
    op.drop_table('admin_audit_logs')
    op.drop_table('users')
    op.drop_table('security_logs')
    op.drop_table('s3_knowledge_base')
    op.drop_table('movie_documents')
    op.drop_table('indexed_sites')
    with op.batch_alter_table('age_verifications', schema=None) as batch_op:
        batch_op.drop_index('idx_age_verification_verified_at')
        batch_op.drop_index('idx_age_verification_session')
        batch_op.drop_index('idx_age_verification_ip')

    op.drop_table('age_verifications')
    # ### end Alembic commands ###
